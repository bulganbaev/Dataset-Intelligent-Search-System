
Yolo-v3 detection pipeline
Pipeline of training and using yolo-v3 based detector on own dataset.
As example used tiny yolo model for detecting eyes on video frame.
Setup
Dependencies

python 3.5
opencv 4.0.1
darknet

Installation
Install darknet from official website official website 
$ git clone https://github.com/pjreddie/darknet
$ cd darknet
In src/image.c after save_image_options function add code:
#ifdef NUMPY
image ndarray_to_image(unsigned char* src, long* shape, long* strides)
{
    int h = shape[0];
    int w = shape[1];
    int c = shape[2];
    int step_h = strides[0];
    int step_w = strides[1];
    int step_c = strides[2];
    image im = make_image(w, h, c);
    int i, j, k;
    int index1, index2 = 0;

    for(i = 0; i < h; ++i){
            for(k= 0; k < c; ++k){
                for(j = 0; j < w; ++j){

                    index1 = k*w*h + i*w + j;
                    index2 = step_h*i + step_w*j + step_c*k;
                    //fprintf(stderr, "w=%d h=%d c=%d step_w=%d step_h=%d step_c=%d \n", w, h, c, step_w, step_h, step_c);
                    //fprintf(stderr, "im.data[%d]=%u data[%d]=%f \n", index1, src[index2], index2, src[index2]/255.);
                    im.data[index1] = src[index2]/255.;
                }
            }
        }

    rgbgr_image(im);

    return im;
}
#endif

In src/image.h after show_image_cv function add code:
#ifdef NUMPY
image ndarray_to_image(unsigned char* src, long* shape, long* strides);
#endif

In Makefile after ifeq ($(OPENCV), 1) function add code (python 3.5):
ifeq ($(NUMPY), 1) 
COMMON+= -DNUMPY -I/usr/include/python3.5/ -I/usr/lib/python3.5/dist-packages/numpy/core/include/numpy/
CFLAGS+= -DNUMPY
endif

and change flags:
GPU=1
CUDNN=1
OPENCV=1
OPENMP=0
NUMPY=1
DEBUG=0


after compile library:
$ make
Getting started
What does your user need to know to get everything ready after installation?
Think about databases, config files, and settings.
Usage
Give your users a sense of the workflow for using your project/tool.
For a website this might include code for running locally.
For an API this might include method and parameter specs.
Demo
Grab a simple block of code that makes use of your project/tool and paste it here.
Team

Name, Organization - role or tasks worked on

Add a "contributors" section if you've incorporated pull requests.
Errors and bugs
If something is not behaving intuitively, it is a bug and should be reported.
Report it here by creating an issue: https://github.com/datamade/your-repo-here/issues
Help us fix the problem as quickly as possible by following Mozilla's guidelines for reporting bugs.
Patches and pull requests
Your patches are welcome. Here's our suggested workflow:

Fork the project.
Make your feature addition or bug fix.
Send us a pull request with a description of your work. Bonus points for topic branches!

Copyright and attribution
Copyright (c) 2016 DataMade. Released under the MIT License.

